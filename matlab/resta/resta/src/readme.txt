MATLAB Builder JA Read Me

1. Prerequisites for Deployment 

* Verify the MATLAB Compiler Runtime (MCR) is installed and ensure you    
  have installed version 7.10. 

* If the MCR is not installed, run MCRInstaller, located in:
 
  G:\MATLAB\R2009a\toolbox\compiler\deploy\win32\MCRInstaller.exe

  For more information on the MCR Installer, see the MATLAB Compiler 
  documentation.  

* Ensure you have the version (1.6.0) of the Java Runtime Environment (JRE). See section 
  5A.
* resta.jar must be included in your CLASSPATH.
* javabuilder.jar must be included in your CLASSPATH.
  
 
2. Files to Deploy and Package

-resta.jar
-MCRInstaller.exe 
   - include when building component by selecting "include MCR" option 
     in deploytool
-Javadoc   
   - javadoc for resta is in the doc directory. While  
     distributing the javadoc, this entire directory should be distributed.
-This readme file


3. Resources

To learn more about:			See:
=================================================================================
Deploying Java applications on the Web 	MATLAB Builder JA USer's Guide
Examples of Java Web Applications 	Application Deployment Web Example Guide      


4. Definitions

MCR - MATLAB Builder JA uses the MATLAB Compiler Runtime (MCR), 
which is a standalone set of shared libraries that enable the execution 
of M-files.The MCR provides complete support for all features of MATLAB 
without the MATLAB GUI. When you package and distribute an application 
to users, you include supporting files generated by the builder as well 
as the MATLAB Compiler Runtime (MCR). If necessary, run 
MCRInstaller to install the correct version of the MCR. For more 
information about the MCR, see the MATLAB Compiler documentation.

MWArray - Use the MWArray class hierarchy, which maps to MATLAB data 
types, to pass input/output arguments to MATLAB Builder JA generated 
functions. This class consists of a thin wrapper around a MATLAB array. 
The MWArray class provides the necessary constructors, methods, and 
operators for array creation and initialization, as well as simple 
indexing. MWArray is included in javabuilder.jar.

MWArray API - The MWArray API, which consists of the MWArray class and 
several derived types that map to MATLAB data types, is the standard 
API that has been used since the introduction of MATLAB Builder JA. It 
provides full marshaling and formatting services for all basic MATLAB 
data types including sparse arrays, structures, and cell arrays. This 
API requires the MATLAB MCR to be installed on the target machine as it 
makes use of several primitive MATLAB functions. For information about 
using this API, see the MATLAB Builder JA documentation. The API classes 
are included in javabuilder.jar.


5. Appendix 

A. On the target machine, add the MCR directory to the system path    
   specified by the target system's environment variable. 


    i. Locate the name of the environment variable to set, using the  
       table below:

    Operating System        Environment Variable
    ================        ====================
    Windows                 PATH
    Linux                   LD_LIBRARY_PATH
    Solaris                 LD_LIBRARY_PATH
    Mac                     DYLD_LIBRARY_PATH


     ii. Set the path by doing one of the following:

        NOTE: <mcr_root> is the directory where MCR is installed
              on the target machine.         
 
        On Windows systems:

        * Add the MCR directory to the environment variable by opening 
        a command prompt and issuing the DOS command, specifying either 
        win32 or win64:

            set PATH=<mcr_root>\v710\runtime\{win32|win64};%PATH% 

        Alternately, for Windows, add the following pathname:
            <mcr_root>\v710\runtime\{win32|win64}
        to the PATH environment variable, specifying either win32 or  
        win64, by doing the following:
            1. Select the My Computer icon on your desktop.
            2. Right-click the icon and select Properties from the menu.
            3. Select the Advanced tab.
            4. Click Environment Variables.  

        On UNIX systems:

        * Add the MCR directory to the environment variable by issuing 
          the following commands:

        Linux
            setenv LD_LIBRARY_PATH
                <mcr_root>/v710/runtime/glnx86:
                <mcr_root>/v710/sys/os/glnx86:
                <mcr_root>/v710/sys/java/jre/glnx86/jre1.6.0/lib/i386/native_threads:
                <mcr_root>/v710/sys/java/jre/glnx86/jre1.6.0/lib/i386/server:
                <mcr_root>/v710/sys/java/jre/glnx86/jre1.6.0/lib/i386
            setenv XAPPLRESDIR <mcr_root>/v710/X11/app-defaults

        Solaris64
            setenv LD_LIBRARY_PATH /usr/lib/lwp:
                <mcr_root>/v710/runtime/sol64:
                <mcr_root>/v710/sys/os/sol64:
                <mcr_root>/v710/sys/java/jre/sol64/jre1.6.0/lib/sparcv9/native_threads:
                <mcr_root>/v710/sys/java/jre/sol64/jre1.6.0/lib/sparcv9/server:
                <mcr_root>/v710/sys/java/jre/sol64/jre1.6.0/lib/sparcv9
            setenv XAPPLRESDIR <mcr_root>/v710/X11/app-defaults

        Linux x86-64
            setenv LD_LIBRARY_PATH
                <mcr_root>/v710/runtime/glnxa64:
                <mcr_root>/v710/sys/os/glnxa64:
                <mcr_root>/v710/sys/java/jre/glnxa64/jre1.6.0/lib/amd64/native_threads:
                <mcr_root>/v710/sys/java/jre/glnxa64/jre1.6.0/lib/amd64/server:
                <mcr_root>/v710/sys/java/jre/glnxa64/jre1.6.0/lib/amd64 
            setenv XAPPLRESDIR <mcr_root>/v710/X11/app-defaults

        Mac
            setenv DYLD_LIBRARY_PATH
                <mcr_root>/v710/runtime/maci:
                <mcr_root>/v710/sys/os/maci:
                <mcr_root>/v710/bin/maci:
                /System/Library/Frameworks/JavaVM.framework/JavaVM:
                /System/Library/Frameworks/JavaVM.framework/Libraries
            setenv XAPPLRESDIR <mcr_root>/v710/X11/app-defaults


        NOTE: To make these changes persistent after logout on UNIX or 
              Mac machines, modify the .cshrc file to include this  
              setenv command.
        NOTE: On Windows, the environment variable syntax utilizes 
              backslashes (\), delimited by semi-colons (;). On UNIX,
              the environment variable syntax utilizes forward slashes  
              (/), delimited by colons (:).  
